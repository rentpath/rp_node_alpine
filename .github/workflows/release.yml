name: release
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      context:
        description: How to correlate status updates.
        required: false
        default: release
      draft:
        description: Is this a draft?
        required: false
        default: "false"
      prerelease:
        description: Is this a prerelease?
        required: false
        default: "false"
jobs:
  build:
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: cancel active workflow runs
        uses: rentpath/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          all_but_latest: true

      - name: check out most recent commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: log inputs
        run: |
          .github/workflows/scripts/log.sh \
            "context:    ${{ github.event.inputs.context }}" \
            "draft:      ${{ github.event.inputs.draft }}" \
            "prerelease: ${{ github.event.inputs.prerelease }}"

      - name: get app token from rossum
        id: rossum
        uses: getsentry/action-github-app-token@v1
        with:
          app_id: ${{ secrets.ROSSUM_APP_ID }}
          private_key: ${{ secrets.ROSSUM_PRIVATE_KEY }}

      - name: set variables
        id: vars
        run: |
          OWNER=$( echo ${{ github.repository }} | sed -E -e 's/\/.+$//' )
          echo "OWNER=$OWNER" >> $GITHUB_ENV
          echo "::set-output name=owner::${OWNER}"

          REPO=$( echo ${{ github.repository }} | sed -E -e 's/^[^\/]+\///')
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "::set-output name=repo::${REPO}"

          CONTEXT="${{ github.event.inputs.context || 'release' }}"
          echo "CONTEXT=${CONTEXT}" >> $GITHUB_ENV
          echo "::set-output name=context::${CONTEXT}"

          IMAGE="ghcr.io/${{ github.repository }}"
          if [[ "$REPO" = "ag.js" ]]; then
            IMAGE="ghcr.io/rentpath/agjs"
          fi
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          echo "::set-output name=image::${IMAGE}"

          REF="${{ github.head_ref || github.ref }}"
          echo "REF=${REF}" >> $GITHUB_ENV
          echo "::set-output name=ref::${REF}"

          SHA=$( git rev-parse HEAD )
          echo "SHA=${SHA}" >> $GITHUB_ENV
          echo "::set-output name=sha::${SHA}"

          SHORT_SHA=$( git rev-parse --short HEAD )
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          echo "::set-output name=short_sha::${SHORT_SHA}"

          ALPINE_VERSION="3.15.4"
          if [[ -r .alpine-version ]]; then
            ALPINE_VERSION=$( cat .alpine-version )
          fi
          echo "ALPINE_VERSION=${ALPINE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=alpine_version::${ALPINE_VERSION}"

          NODE_VERSION="16.14.0"
          if [[ -r .node-version ]]; then
            NODE_VERSION=$( cat .node-version )
          elif [[ -r .tool-versions ]]; then
            NODE_VERSION=$( cat .tool-versions | grep -E "^nodejs" | cut -d ' ' -f 2 | sed -e 's/^\s+|\s+$//g' )
          fi
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=node_version::${NODE_VERSION}"

          YARN_VERSION="1.22.17"
          if [[ -r .yarn-version ]]; then
            YARN_VERSION=$( cat .yarn-version )
          elif [[ -r .tool-versions ]]; then
            YARN_VERSION=$( cat .tool-versions | grep -E "^yarn" | cut -d ' ' -f 2 | sed -e 's/^\s+|\s+$//g' )
          fi
          echo "YARN_VERSION=${YARN_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=yarn_version::${YARN_VERSION}"

          VERSION="alpine-${ALPINE_VERSION}_node-v${NODE_VERSION}_yarn-v${YARN_VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"

      - name: log variables
        run: |
          .github/workflows/scripts/log.sh \
            "owner:          ${{ steps.vars.outputs.owner }}" \
            "repo:           ${{ steps.vars.outputs.repo }}" \
            "context:        ${{ steps.vars.outputs.context }}" \
            "image:          ${{ steps.vars.outputs.image }}" \
            "ref:            ${{ steps.vars.outputs.ref }}" \
            "sha:            ${{ steps.vars.outputs.sha }}" \
            "short_sha:      ${{ steps.vars.outputs.short_sha }}" \
            "alpine_version: ${{ steps.vars.outputs.alpine_version }}" \
            "node_version:   ${{ steps.vars.outputs.node_version }}" \
            "yarn_version:   ${{ steps.vars.outputs.yarn_version }}" \
            "version:        ${{ steps.vars.outputs.version }}"

      - name: set context status to "Starting release…"
        uses: rentpath/update-status-action@v1
        with:
          context: "${{ steps.vars.outputs.context }}"
          description: Starting release…
          sha: ${{ steps.vars.outputs.sha }}
          state: pending

      - name: auth with docker
        run: |
          echo ${{ secrets.GHCR_USER_PAT }} | docker login ghcr.io -u ${{ secrets.GHCR_USER_NAME }} --password-stdin

      - name: build release image
        run: |
          docker build \
            -t ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }} \
            -t ${{ steps.vars.outputs.image }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE \
            --build-arg ALPINE_VERSION="${{ steps.vars.outputs.alpine_version }}" \
            --build-arg NODE_VERSION="${{ steps.vars.outputs.node_version }}" \
            --build-arg YARN_VERSION="${{ steps.vars.outputs.yarn_version }}" \
            --cache-from $CACHE_FROM \
            -f Dockerfile \
            .
        env:
          BUILDKIT_INLINE_CACHE: 1
          CACHE_FROM: ${{ steps.vars.outputs.image }}:latest
          DOCKER_BUILDKIT: 1

      - name: push to docker registry
        run: |
          docker push ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}
          docker push ${{ steps.vars.outputs.image }}:latest

      - name: git tag
        run: |
          git config --global user.email "idg@rentpath.com"
          git config --global user.name "rentpath-plateng"
          git tag --list "${{ steps.vars.outputs.version }}" | grep -q "${{ steps.vars.outputs.version }}" || \
            git tag -a ${{ steps.vars.outputs.version }} -m "${{ steps.vars.outputs.version }}" && \
            git push origin refs/tags/${{ steps.vars.outputs.version }}:refs/tags/${{ steps.vars.outputs.version }}

      - name: release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          release_name: ${{ steps.vars.outputs.version }}
          body: "Docker Image: [${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}](https://github.com/orgs/rentpath/packages/container/package/${{ steps.vars.outputs.repo }}) -- `(docker pull ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.version }})`"
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - if: success()
        name: set context status to "success" with the build version
        uses: rentpath/update-status-action@v1
        with:
          context: "${{ steps.vars.outputs.context }}"
          description: "Build: ${{ steps.vars.outputs.version }}"
          sha: ${{ steps.vars.outputs.sha }}
          state: success

      - if: cancelled()
        name: set context status to "cancelled"
        uses: rentpath/update-status-action@v1
        with:
          context: "${{ steps.vars.outputs.context }}"
          description: A user or a recent push canceled this build.
          sha: ${{ steps.vars.outputs.sha }}
          state: cancelled

      - if: failure()
        name: set context status to "failure"
        uses: rentpath/update-status-action@v1
        with:
          context: "${{ steps.vars.outputs.context }}"
          description: Build failed. See the 'build' workflow for logs.
          sha: ${{ steps.vars.outputs.sha }}
          state: failure
